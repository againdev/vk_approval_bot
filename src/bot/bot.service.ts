import { Injectable, Logger } from '@nestjs/common';
import axios from 'axios';
import { ConfigService } from '@nestjs/config';
import { AppConfig } from 'src/app.config';
import { SchedulerRegistry } from '@nestjs/schedule';
import { RedisService } from '@liaoliaots/nestjs-redis';
import { PrismaService } from 'src/prisma.service';
import { TASK_STATUS, USER_STEPS } from './bot.types';

@Injectable()
export class BotService {
  private readonly apiUrl = 'https://myteam.mail.ru/bot/v1';
  private lastEventId: number = 0;
  private readonly logger = new Logger(BotService.name);

  constructor(
    private readonly configService: ConfigService,
    private readonly schedulerRegistry: SchedulerRegistry,
    private readonly redisService: RedisService,
    private readonly prisma: PrismaService,
  ) {
    this.startPolling();
    this.startReminderChecks();
  }

  async onModuleInit() {
    const redis = this.redisService.getOrThrow();
    console.log('Clearing Redis data...');
    await redis.flushdb();
    console.log('Redis cleared.');
  }

  private startPolling() {
    const pollTime = 3;
    const interval = setInterval(async () => {
      try {
        this.logger.log(`Polling events with lastEventId: ${this.lastEventId}`);
        const events = await this.getEvents(this.lastEventId, pollTime);
        if (events.ok && events.events.length > 0) {
          for (const event of events.events) {
            this.logger.log(`New event: ${JSON.stringify(event)}`);
            if (event.type === 'newMessage') {
              const { chat, text } = event.payload;
              const chatId = chat.chatId;
              await this.handleMessage(chatId, text, event);
            } else if (event.type === 'callbackQuery') {
              await this.handleCallback(event);
            }
            this.lastEventId = event.eventId;
          }
        }
      } catch (error) {
        this.logger.error(`Error polling events: ${error.message}`);
      }
    }, pollTime * 1000);

    this.schedulerRegistry.addInterval('pollEvents', interval);
  }

  private startReminderChecks() {
    const reminderCheckInterval = 30 * 1000;
    const interval = setInterval(async () => {
      try {
        this.logger.log('Checking for pending reminders...');
        const now = new Date();

        const tasks = await this.prisma.task.findMany({
          where: {
            status: 'PENDING',
            lastRemind: {
              lt: now,
            },
          },
        });

        for (const task of tasks) {
          try {
            const message = `–£ –≤–∞—Å –µ—Å—Ç—å –∑–∞–¥–∞—á–∞ –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: ${task.text}`;
            await this.sendReminderWithButtons(task.userToId, task.id);

            const newLastRemind = new Date(
              now.getTime() + task.remindInterval * 60 * 1000,
            );
            await this.prisma.task.update({
              where: { id: task.id },
              data: { lastRemind: newLastRemind },
            });

            this.logger.log(`Reminder sent for task: ${task.id}`);
          } catch (error) {
            this.logger.error(
              `Error sending reminder for task ${task.id}: ${error.message}`,
            );
          }
        }
      } catch (error) {
        this.logger.error(`Error checking reminders: ${error.message}`);
      }
    }, reminderCheckInterval);

    this.schedulerRegistry.addInterval('reminderChecks', interval);
  }

  private async sendReminderWithButtons(
    chatId: string,
    taskId: string,
  ): Promise<void> {
    const task = await this.prisma.task.findUnique({
      where: { id: taskId },
    });

    if (!task) {
      this.logger.error(`–ó–∞–¥–∞—á–∞ —Å ID ${taskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
      throw new Error(`–ó–∞–¥–∞—á–∞ —Å ID ${taskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
    }

    let messageText =
      `üì® *–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ*\n\n` +
      `*–û—Ç:* ${task.firstName} ${task.lastName}\n`;
    if (task.text) {
      messageText += `*–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:* ${task.text || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n`;
    }
    if (task.fileId) {
      messageText += `*–û–ø–∏—Å–∞–Ω–∏–µ —Ñ–∞–π–ª–∞:* ${task.fileCaption || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n`;
    }

    const inlineKeyboardMarkup = [
      [
        {
          text: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
          callbackData: `approve_${taskId}`,
          style: 'primary',
        },
        {
          text: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å',
          callbackData: `reject_${taskId}`,
          style: 'attention',
        },
      ],
    ];

    if (task.fileId) {
      const fileUrl = `${this.apiUrl}/messages/sendFile`;
      const fileParams = {
        token:
          this.configService.get<AppConfig['VK_BOT_TOKEN']>('VK_BOT_TOKEN'),
        chatId,
        fileId: task.fileId,
        caption: messageText,
        inlineKeyboardMarkup: JSON.stringify(inlineKeyboardMarkup),
        parseMode: 'MarkdownV2',
      };

      try {
        await axios.get(fileUrl, { params: fileParams });
        this.logger.log(
          `–§–∞–π–ª —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ ${chatId}: ${task.fileId}`,
        );
      } catch (error) {
        this.logger.error(
          `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –≤ ${chatId}: ${error.message}`,
        );
        throw error;
      }
    } else {
      const textUrl = `${this.apiUrl}/messages/sendText`;
      const textParams = {
        token:
          this.configService.get<AppConfig['VK_BOT_TOKEN']>('VK_BOT_TOKEN'),
        chatId,
        text: messageText,
        parseMode: 'MarkdownV2',
        inlineKeyboardMarkup: JSON.stringify(inlineKeyboardMarkup),
      };

      try {
        await axios.post(textUrl, null, { params: textParams });
        this.logger.log(
          `–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ ${chatId}: ${messageText}`,
        );
      } catch (error) {
        this.logger.error(
          `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ ${chatId}: ${error.message}`,
        );
        throw error;
      }
    }
  }

  async getSelfInfo(): Promise<any> {
    const url = `${this.apiUrl}/self/get`;
    const params = {
      token: this.configService.get<AppConfig['VK_BOT_TOKEN']>('VK_BOT_TOKEN'),
    };

    try {
      const response = await axios.get(url, { params });
      return response.data;
    } catch (error) {
      this.logger.error(`Failed to get self info: ${error.message}`);
      throw error;
    }
  }

  async getEvents(lastEventId: number, pollTime: number): Promise<any> {
    const url = `${this.apiUrl}/events/get`;
    const params = {
      token: this.configService.get<AppConfig['VK_BOT_TOKEN']>('VK_BOT_TOKEN'),
      lastEventId,
      pollTime,
    };

    try {
      const response = await axios.get(url, { params });
      return response.data;
    } catch (error) {
      this.logger.error(`Failed to get events: ${error.message}`);
      throw error;
    }
  }

  async handleMessage(chatId: string, text: string, event: any): Promise<any> {
    const url = `${this.apiUrl}/messages/sendText`;
    let responseText: string;
    let inlineKeyboardMarkup: any[] = [];

    const redis = this.redisService.getOrThrow();
    const userState = await redis.get(chatId);

    const file = event.payload.parts?.find(
      (part: any) => part.type === 'file',
    )?.payload;

    if (userState) {
      const { step, taskData } = JSON.parse(userState);

      let urlParts;
      let contactId;

      switch (step) {
        case USER_STEPS.AWAITING_DESCRIPTION:
          taskData.description = text;
          taskData.firstName = event.payload.from.firstName;
          taskData.lastName = event.payload.from.lastName;
          if (file) {
            taskData.fileId = file.fileId;
            taskData.fileCaption = file.caption;
          }
          await redis.set(
            chatId,
            JSON.stringify({ step: USER_STEPS.AWAITING_USER_ID, taskData }),
            'EX',
            3600,
          );
          responseText =
            '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –∏–∑ –≤–∞—à–∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤, –∫–æ–º—É –Ω—É–∂–Ω–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É:';
          break;

        case USER_STEPS.AWAITING_USER_ID:
          urlParts = text.split('/');
          contactId = urlParts[urlParts.length - 1];

          if (!contactId || !contactId.includes('@')) {
            responseText =
              '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –∏–∑ –≤–∞—à–∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.';
            break;
          }

          try {
            const user = await this.prisma.user.findUnique({
              where: { vkId: contactId },
            });

            if (!user) {
              responseText = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º userId –Ω–µ –Ω–∞–π–¥–µ–Ω.';
              break;
            }

            taskData.userId = contactId;
            if (file) {
              taskData.fileId = file.fileId;
              taskData.fileCaption = file.caption;
            }

            await redis.set(
              chatId,
              JSON.stringify({ step: USER_STEPS.AWAITING_TIME, taskData }),
              'EX',
              3600,
            );
            responseText = '–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö:';
          } catch (error) {
            this.logger.error(
              `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`,
            );
            responseText =
              '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
          }
          break;

        case USER_STEPS.AWAITING_USER_ID_FOR_TASKS:
          urlParts = text.split('/');
          contactId = urlParts[urlParts.length - 1];

          if (!contactId || !contactId.includes('@')) {
            responseText =
              '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –∏–∑ –≤–∞—à–∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.';
            break;
          }

          try {
            const userToCheck = await this.prisma.user.findUnique({
              where: { vkId: contactId },
            });

            if (!userToCheck) {
              responseText = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º userId –Ω–µ –Ω–∞–π–¥–µ–Ω.';
              break;
            }

            const tasks = await this.prisma.task.findMany({
              where: {
                userToId: contactId,
              },
              orderBy: {
                createdAt: 'desc',
              },
              take: 10,
            });

            if (tasks.length === 0) {
              responseText = `–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userToCheck.firstName} ${userToCheck.lastName} –Ω–µ—Ç –∑–∞–¥–∞—á.`;
            } else {
              responseText = `üìù *–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userToCheck.firstName} ${userToCheck.lastName}:*\n\n`;

              for (const task of tasks) {
                const assignedUser = await this.prisma.user.findUnique({
                  where: { vkId: task.userToId },
                });

                responseText +=
                  `*–ó–∞–¥–∞—á–∞ ${tasks.indexOf(task) + 1}:*\n` +
                  `*–û–ø–∏—Å–∞–Ω–∏–µ:* ${task.text ? task.text : task.fileCaption || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n` +
                  `*–î–ª—è –∫–æ–≥–æ:* ${assignedUser ? `${assignedUser.firstName} ${assignedUser.lastName}` : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n` +
                  `*–°—Ç–∞—Ç—É—Å:* ${task.status === 'APPROVED' ? '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞' : task.status === 'REJECTED' ? '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞' : '–í –æ–∂–∏–¥–∞–Ω–∏–∏'}\n` +
                  `*–°–æ–∑–¥–∞–Ω–æ:* ${task.createdAt.toLocaleString()}\n\n`;
              }
            }

            await redis.del(chatId);
          } catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á: ${error.message}`);
            responseText =
              '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
          }
          break;

        case USER_STEPS.AWAITING_TIME:
          const interval = parseInt(text, 10);
          if (isNaN(interval) || interval <= 0) {
            responseText =
              '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.';
            break;
          }

          taskData.remindInterval = interval;

          try {
            await this.prisma.task.create({
              data: {
                userToId: taskData.userId,
                chatId: chatId,
                firstName: taskData.firstName,
                lastName: taskData.lastName,
                text: taskData.description,
                fileId: taskData.fileId,
                fileCaption: taskData.fileCaption,
                status: TASK_STATUS.PENDING,
                remindInterval: taskData.remindInterval,
                lastRemind: new Date(),
              },
            });
            this.logger.log(`–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: ${JSON.stringify(taskData)}`);
            responseText = '–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!';
          } catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: ${error.message}`);
            responseText =
              '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
            break;
          }

          await redis.del(chatId);
          break;

        default:
          responseText =
            '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.';
          break;
      }
    } else {
      const command = text.split(' ')[0];

      switch (command) {
        case '/start':
          await redis.del(chatId);

          const { firstName, lastName } = event.payload.from;

          try {
            await this.prisma.user.upsert({
              where: { vkId: chatId },
              update: {},
              create: {
                vkId: chatId,
                firstName,
                lastName,
              },
            });
            this.logger.log(
              `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${chatId} –¥–æ–±–∞–≤–ª–µ–Ω –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`,
            );
          } catch (error) {
            this.logger.error(
              `–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`,
            );
            throw error;
          }

          responseText = `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:`;
          inlineKeyboardMarkup = [
            [
              {
                text: '–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É',
                callbackData: 'create_task',
                style: 'primary',
              },
              {
                text: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                callbackData: 'check_user_tasks',
                style: 'primary',
              },
            ],
            [
              {
                text: '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏',
                callbackData: 'watch_tasks',
                style: 'primary',
              },
            ],
            [
              {
                text: '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É',
                callbackData: 'watch_statistics',
                style: 'primary',
              },
            ],
          ];
          break;

        case '/help':
          responseText = `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
    /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
    /create-task - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    /delete-task - –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É
    /watch-last-tasks - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏
    /help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥`;
          break;

        default:
          responseText =
            '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.';
          break;
      }
    }

    const params = {
      token: this.configService.get<AppConfig['VK_BOT_TOKEN']>('VK_BOT_TOKEN'),
      chatId,
      text: responseText,
      parseMode: 'MarkdownV2',
      inlineKeyboardMarkup:
        inlineKeyboardMarkup.length > 0
          ? JSON.stringify(inlineKeyboardMarkup)
          : null,
    };

    try {
      this.logger.log(
        `–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: ${JSON.stringify({ chatId, text: responseText, inlineKeyboardMarkup })}`,
      );
      const response = await axios.post(url, null, { params });
      this.logger.log(`–û—Ç–≤–µ—Ç –æ—Ç API: ${JSON.stringify(response.data)}`);
      return response.data;
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`);
      throw error;
    }
  }

  async handleCallback(event: any): Promise<any> {
    console.log('–ü–æ–ª—É—á–µ–Ω callback:', event);

    const { callbackData, queryId } = event.payload;
    const chatId = event.payload.message.chat.chatId;
    const userId = event.payload.from.userId;

    let responseText: string;

    const redis = this.redisService.getOrThrow();
    const userState = await redis.get(chatId);
    const { step, taskData } = userState
      ? JSON.parse(userState)
      : { step: null, taskData: {} };

    if (
      callbackData.startsWith('approve_') ||
      callbackData.startsWith('reject_')
    ) {
      const [action, taskId] = callbackData.split('_');

      try {
        const task = await this.prisma.task.findUnique({
          where: { id: taskId },
          select: { status: true },
        });

        if (!task) {
          responseText = '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.';
        } else if (task.status === 'PENDING') {
          const newStatus = action === 'approve' ? 'APPROVED' : 'REJECTED';
          await this.prisma.task.update({
            where: { id: taskId },
            data: { status: newStatus },
          });

          responseText =
            action === 'approve'
              ? '–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!'
              : '–ó–∞–¥–∞—á–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.';
        } else if (task.status === 'APPROVED') {
          responseText = '–ó–∞–¥–∞—á–∞ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.';
        } else if (task.status === 'REJECTED') {
          responseText = '–ó–∞–¥–∞—á–∞ —É–∂–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.';
        } else {
          responseText = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏.';
        }
      } catch (error) {
        this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: ${error.message}`);
        responseText =
          '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
      }
    } else {
      switch (callbackData) {
        case 'create_task':
          await redis.set(
            chatId,
            JSON.stringify({
              step: USER_STEPS.AWAITING_DESCRIPTION,
              taskData: {},
            }),
          );
          responseText = '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:';
          break;

        case 'watch_tasks':
          try {
            const tasks = await this.prisma.task.findMany({
              where: {
                chatId: userId,
              },
              orderBy: {
                createdAt: 'desc',
              },
              take: 10,
            });

            if (tasks.length === 0) {
              responseText = '–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.';
            } else {
              responseText = 'üìù *–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–¥–∞—á:*\n\n';

              for (const task of tasks) {
                const assignedUser = await this.prisma.user.findUnique({
                  where: { vkId: task.userToId },
                });

                responseText +=
                  `*–ó–∞–¥–∞—á–∞ ${tasks.indexOf(task) + 1}:*\n` +
                  `*–û–ø–∏—Å–∞–Ω–∏–µ:* ${task.text ? task.text : task.fileCaption || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n` +
                  `*–î–ª—è –∫–æ–≥–æ:* ${assignedUser ? `${assignedUser.firstName} ${assignedUser.lastName}` : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n` +
                  `*–°—Ç–∞—Ç—É—Å:* ${task.status === 'APPROVED' ? '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞' : task.status === 'REJECTED' ? '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞' : '–í –æ–∂–∏–¥–∞–Ω–∏–∏'}\n` +
                  `*–°–æ–∑–¥–∞–Ω–æ:* ${task.createdAt.toLocaleString()}\n\n`;
              }
            }
          } catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á: ${error.message}`);
            responseText =
              '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
          }
          break;

        case 'check_user_tasks':
          await redis.set(
            chatId,
            JSON.stringify({
              step: USER_STEPS.AWAITING_USER_ID_FOR_TASKS,
              taskData: {},
            }),
          );
          responseText = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:';
          break;

        case 'watch_statistics':
          try {
            const totalTasks = await this.prisma.task.count({
              where: {
                chatId: userId,
              },
            });

            const approvedTasks = await this.prisma.task.count({
              where: {
                chatId: userId,
                status: 'APPROVED',
              },
            });

            const rejectedTasks = await this.prisma.task.count({
              where: {
                chatId: userId,
                status: 'REJECTED',
              },
            });

            const pendingTasks = await this.prisma.task.count({
              where: {
                chatId: userId,
                status: 'PENDING',
              },
            });

            responseText =
              `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∞—à–∏–º –∑–∞–¥–∞—á–∞–º:*\n\n` +
              `‚Ä¢ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞—á: ${totalTasks}\n` +
              `‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–æ: ${approvedTasks}\n` +
              `‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: ${rejectedTasks}\n` +
              `‚Ä¢ –í –æ–∂–∏–¥–∞–Ω–∏–∏: ${pendingTasks}`;
          } catch (error) {
            this.logger.error(
              `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error.message}`,
            );
            responseText =
              '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
          }
          break;

        default:
          responseText =
            '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.';
          break;
      }
    }

    try {
      await this.answerCallbackQuery(queryId, '–ö–æ–º–∞–Ω–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞');
    } catch (error) {
      this.logger.error(`Failed to answer callback query: ${error.message}`);
      throw error;
    }

    const url = `${this.apiUrl}/messages/sendText`;
    const params = {
      token: this.configService.get<AppConfig['VK_BOT_TOKEN']>('VK_BOT_TOKEN'),
      chatId,
      text: responseText,
      parseMode: 'MarkdownV2',
    };

    try {
      console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', { chatId, text: responseText });
      const response = await axios.post(url, null, { params });
      console.log('–û—Ç–≤–µ—Ç –æ—Ç API:', response.data);
      return response.data;
    } catch (error) {
      this.logger.error(`Failed to send message: ${error.message}`);
      throw error;
    }
  }

  async answerCallbackQuery(queryId: string, text?: string): Promise<any> {
    const url = `${this.apiUrl}/messages/answerCallbackQuery`;
    const params = {
      token: this.configService.get<AppConfig['VK_BOT_TOKEN']>('VK_BOT_TOKEN'),
      queryId,
      text,
    };

    try {
      const response = await axios.get(url, { params });
      return response.data;
    } catch (error) {
      this.logger.error(`Failed to answer callback query: ${error.message}`);
      throw error;
    }
  }
}
